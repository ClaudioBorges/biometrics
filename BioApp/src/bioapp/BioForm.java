/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bioapp;


import java.text.ParseException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.MaskFormatter;

import bioclient.BioClient;
import java.awt.Color;
/**
 *
 * @author Claudio
 */
public class BioForm extends javax.swing.JFrame {

    private MaskFormatter cpfFormatter = null;
    private boolean isRegisteringOutput = false;
    private final Timer timer = new Timer();
    
    /**
     * Creates new form BioForm
     */
    public BioForm() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        try {
            cpfFormatter = new MaskFormatter("###.###.###-##");
            cpfFormatter.setValidCharacters("0123456789");
        }
        catch (ParseException ex) {
            Logger.getLogger(BioForm.class.getName())
            .log(Level.SEVERE, null, ex);
        }
        jCPF = new javax.swing.JFormattedTextField(cpfFormatter);
        jLabelMsg = new javax.swing.JLabel();
        jButton_Reg = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCPF.setText("");
        jCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCPFActionPerformed(evt);
            }
        });

        jLabelMsg.setText("Aguardando CPF...");

        jButton_Reg.setText("Registrar biometria");
        jButton_Reg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RegActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCPF)
                    .addComponent(jButton_Reg, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(jLabelMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addComponent(jCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_Reg)
                .addGap(18, 18, 18)
                .addComponent(jLabelMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCPFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCPFActionPerformed

    private void jButton_RegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RegActionPerformed
        // TODO add your handling code here:
        String cpf = ValidaCPF.formatCPF_onlyNumbers(jCPF.getText());
        boolean valido = ValidaCPF.isCPF(cpf);
        
        if (valido == false) {
            ihmInvalidCpf();

            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    ihmWaitingCpf();
                }
            }, 2000);            
        }
        else {
            ihmWaitingBiometric();
            
            Runnable reqCpf;
            reqCpf = () -> {
                BioClient.BIO_CHECK_ERROR err;
                err = BioClient.reqBioFromCpf(cpf);
                
                Biometric_IdentifyEvent(err);
            };
            new Thread(reqCpf).start();            
        }
    }//GEN-LAST:event_jButton_RegActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BioForm().setVisible(true);
        });
    }
    
    private synchronized void Biometric_IdentifyEvent(
            BioClient.BIO_CHECK_ERROR err) {

        switch (err) {
        case MATCHED:
            if (isRegisteringOutput == false) {
                ihmInChecked();
            }
            else {
                ihmOutChecked();
            }
            break;

        case NOT_MATCHED:
            ihmBiometricNotMatched();            
            break;

        case UNKNOWN_CPF:
            ihmBiometricFail("CPF " + jCPF.getText() + " não cadastrado.");
            break;

        case TIMEOUT:
        case CONNECTION_LOST:
        case CONNECTION_UNREACHED:
        case UNKNOWN:
            ihmBiometricFail("Erro de comunicação com o sensor.");
            break;
        }
        
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                ihmWaitingCpf();
            }
        }, 2000);
    }
    
    private void ihmWaitingCpf() {
        //jCPF.setText("");
        jLabelMsg.setForeground(Color.GREEN);
        jLabelMsg.setText("Aguardando CPF...");
        
        jCPF.setEnabled(true);
        jButton_Reg.setEnabled(true);
    }
    
    private void ihmWaitingBiometric() {
        jCPF.setEnabled(false);
        jButton_Reg.setEnabled(false);
        
        jLabelMsg.setForeground(Color.cyan);
        jLabelMsg.setText("Aguardando biometria para o CPF: " + jCPF.getText());
    }

    private void ihmInvalidCpf() {
        jCPF.setEnabled(false);
        jButton_Reg.setEnabled(false);

        jLabelMsg.setForeground(Color.RED);
        jLabelMsg.setText("CPF " + jCPF.getText() + "   é inválido.");
    }
    
    private void ihmOutChecked() {
        jLabelMsg.setForeground(Color.GREEN);
        jLabelMsg.setText("Saída registrada para: " + jCPF.getText());
    }
    
    private void ihmInChecked() {
        jLabelMsg.setForeground(Color.GREEN);
        jLabelMsg.setText("Entrada registrada para: " + jCPF.getText());
    }
    
    private void ihmBiometricNotMatched() {
        jLabelMsg.setForeground(Color.RED);
        jLabelMsg.setText("Biometria não compatível com: " + jCPF.getText());
    }
    
    private void ihmBiometricFail(String s) {
        jLabelMsg.setForeground(Color.RED);
        jLabelMsg.setText(s);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Reg;
    private javax.swing.JFormattedTextField jCPF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelMsg;
    // End of variables declaration//GEN-END:variables
}
